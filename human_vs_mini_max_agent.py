# -*- coding: utf-8 -*-
"""Human vs Mini-Max Agent

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RqQNdCh7xWsTfUYjxyZ6lGBctWo-wVF3
"""

import numpy as np
import random
import math

ROWS = 6
COLUMNS = 7

PLAYER_HUMAN = '●'
MINIMAX_AGENT = '○'
EMPTY = ' '

MAX_DEPTH = 4

def create_board():
    return np.full((ROWS, COLUMNS), EMPTY)

def print_board(board):
    print("\n  0 1 2 3 4 5 6")
    print("  -------------")
    for row in board:
        print(" |" + '|'.join(row) + '|')
    print("  -------------")

def is_valid_location(board, col):
    return board[0][col] == EMPTY #checks for empty column

def get_next_open_row(board, col): #finds next available row, top to bottom.
    for row in reversed(range(ROWS)):
        if board[row][col] == EMPTY:
            return row
    return None

def drop_piece(board, row, col, piece): # the turn is played
    board[row][col] = piece

def winning_move(board, piece): #checks for winning move
    for r in range(ROWS):
        for c in range(COLUMNS - 3):
            if all(board[r][c+i] == piece for i in range(4)):
                return True
    for r in range(ROWS - 3):
        for c in range(COLUMNS):
            if all(board[r+i][c] == piece for i in range(4)):
                return True
    for r in range(ROWS - 3):
        for c in range(COLUMNS - 3):
            if all(board[r+i][c+i] == piece for i in range(4)):
                return True
    for r in range(3, ROWS):
        for c in range(COLUMNS - 3):
            if all(board[r-i][c+i] == piece for i in range(4)):
                return True
    return False

def is_draw(board): #tie check
    return all(board[0][c] != EMPTY for c in range(COLUMNS))

def evaluate_window(window, piece):
    opp_piece = ML_AGENT if piece == MINIMAX_AGENT else MINIMAX_AGENT
    score = 0
    if window.count(piece) == 4:           # mini max scoring method https://www.geeksforgeeks.org/mini-max-algorithm-in-artificial-intelligence/
        score += 100
    elif window.count(piece) == 3 and window.count(EMPTY) == 1:
        score += 10
    elif window.count(piece) == 2 and window.count(EMPTY) == 2:
        score += 5
    if window.count(opp_piece) == 3 and window.count(EMPTY) == 1:
        score -= 80
    return score

def score_position(board, piece):
    score = 0
    center_array = [board[i][COLUMNS//2] for i in range(ROWS)]
    score += center_array.count(piece) * 6 #center pieces more favoured

    for r in range(ROWS):
        row_array = list(board[r])
        for c in range(COLUMNS - 3):
            window = row_array[c:c+4]
            score += evaluate_window(window, piece)

    for c in range(COLUMNS):
        col_array = [board[r][c] for r in range(ROWS)]
        for r in range(ROWS - 3):
            window = col_array[r:r+4]
            score += evaluate_window(window, piece)

    for r in range(ROWS - 3):
        for c in range(COLUMNS - 3):
            window = [board[r+i][c+i] for i in range(4)]
            score += evaluate_window(window, piece)

    for r in range(3, ROWS):
        for c in range(COLUMNS - 3):
            window = [board[r-i][c+i] for i in range(4)]
            score += evaluate_window(window, piece)

    return score

def minimax(board, depth, alpha, beta, maximizingPlayer): # minimax algorithm https://www.geeksforgeeks.org/mini-max-algorithm-in-artificial-intelligence/
    valid_locations = [c for c in range(COLUMNS) if is_valid_location(board, c)]
    is_terminal = winning_move(board, ML_AGENT) or winning_move(board, MINIMAX_AGENT) or is_draw(board)

    if depth == 0 or is_terminal:
        if winning_move(board, MINIMAX_AGENT):
            return (None, 100000000)
        elif winning_move(board, ML_AGENT):
            return (None, -100000000)
        elif is_draw(board):
            return (None, 0)
        else:
            return (None, score_position(board, MINIMAX_AGENT))

    if maximizingPlayer: #minimax, maximise score
        value = -math.inf
        best_col = random.choice(valid_locations)
        for col in valid_locations:
            row = get_next_open_row(board, col)
            temp_board = board.copy()
            drop_piece(temp_board, row, col, MINIMAX_AGENT)
            new_score = minimax(temp_board, depth-1, alpha, beta, False)[1]
            if new_score > value:
                value = new_score
                best_col = col
            alpha = max(alpha, value)
            if alpha >= beta:
                break
        return best_col, value
    else:
        value = math.inf
        best_col = random.choice(valid_locations)
        for col in valid_locations:
            row = get_next_open_row(board, col)
            temp_board = board.copy()
            drop_piece(temp_board, row, col, ML_AGENT)
            new_score = minimax(temp_board, depth-1, alpha, beta, True)[1]
            if new_score < value:
                value = new_score
                best_col = col
            beta = min(beta, value)
            if alpha >= beta:
                break
        return best_col, value

def play_game():
    board = create_board()
    game_over = False
    turn = 0

    print("Human vs Mini-Max Agent")
    print_board(board)

    while not game_over:
        if turn == 0:
            try:
                col = int(input("Your move (●), choose column (0–6): "))
                if 0 <= col <= 6 and is_valid_location(board, col):
                    row = get_next_open_row(board, col)
                    drop_piece(board, row, col, PLAYER_HUMAN)

                    if winning_move(board, PLAYER_HUMAN):
                        print_board(board)
                        print("You win!")
                        game_over = True
                    elif is_draw(board):
                        print_board(board)
                        print("It's a draw!")
                        game_over = True
                    else:
                        turn = 1
                else:
                    print("Invalid move. Try again.")
            except ValueError:
                print("Please enter a valid number.")
        else:
            col, _ = minimax(board, MAX_DEPTH, -math.inf, math.inf, True)
            row = get_next_open_row(board, col)
            drop_piece(board, row, col, MINIMAX_AGENT)
            print(f"Mini-Max Agent (○) chose column {col}")

            if winning_move(board, MINIMAX_AGENT):
                print_board(board)
                print("Mini-Max Agent wins!")
                game_over = True
            elif is_draw(board):
                print_board(board)
                print("It's a draw!")
                game_over = True
            else:
                turn = 0

        print_board(board)

if __name__ == "__main__":
    play_game()